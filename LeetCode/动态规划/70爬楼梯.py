"""
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
"""

"""
动态规划

问题拆解：
	到达第n个台阶，可以从n-1和n-2个到达
状态转移方程：
	dp[i] = dp[i-1] + dp[i-2]
初始化:
	dp[0] = 0 
	dp[1] = 1  爬1层只有1这一种
	dp[2] = 2 
"""
def climbStairs(n: int) -> int:
	dp = {}
	dp[0] = 0
	dp[1] = 1
	dp[2] = 2
	for i in range(3, n + 1):
		dp[i] = dp[i-1] + dp[i - 2]
	return dp[n]


if __name__ == '__main__':
	n = 3
	print(climbStairs(n))